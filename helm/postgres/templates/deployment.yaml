apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ include "postgres.storage" . }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: storage
              mountPath: /var/lib/postgresql
          {{- end }}
          env:
            - name: POSTGRES_USER
              value: {{ .Values.config.user }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.config.password }}
            {{- if .Values.config.database }}
            - name: POSTGRES_DB
              value: {{ .Values.config.database }}
            {{- end }}
            {{- if .Values.config.initdb }}
            - name: POSTGRES_INITDB_ARGS
              value: {{ .Values.config.initdb }}
            {{- end }}
          ports:
            - name: db
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

config:
  # The Indexer primarily provides two services, loading a PostgreSQL database
  # with ledger data (writer), supplying a REST API to search this ledger data
  # (reader) or both (full).
  # Valid mode values: writer, reader, full
  mode: full
  # Connection details to an algod node. Required when the indexer
  # is run in either `writer` or `full` mode.
  algod:
    address: "algod:80"
    token: "my-super-secret-access-token"
  # PostgreSQL instance to read/write data from.
  postgres:
    host: "postgres"
    port: 5432
    user: "algorand"
    password: "algorand"
    dbname: "ledger_data"

# Autoscaling and replication are used to scale indexer instances
# when on deployed on `reader` mode.
replicaCount: 1
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

image:
  repository: ghcr.io/bryk-io/algod-indexer
  pullPolicy: IfNotPresent
  pullSecrets: []
    # - name: ghcr-io
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
